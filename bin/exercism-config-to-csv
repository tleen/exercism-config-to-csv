#!/usr/bin/env node

// This is the executable wrapper around the package, it defines the CLI and
// handles fetching/local reading of the config.json file.
let fetch = require('node-fetch'),
    path = require('path'),
    pkg = require('../package.json'),
    program = require('commander');

program
  .version(pkg.version)
  .arguments('<track>')
  .action((track) => {

    getConfigData(track)
      .then((data) => {
        process.stdout.write(require('..')(data));
      })
      .catch((reason) => {
        console.error('error', reason);
      });


  })
  .parse(process.argv);

// Simple wrapper to return remote or local fetch
function getConfigData(track){

  if(track.endsWith('config.json')) return getLocalConfigData(track);
  return getRemoteConfigData(track);

}

// Look locally for the config.json file, input file arg is relative to
// current working directory
function getLocalConfigData(filename){
  return new Promise((resolve, reject) => {
    let file = path.resolve(process.cwd(),filename);
    return resolve(require(file));
  });
}

// Try to get the config.json from the current master branch of a go track.
function getRemoteConfigData(track){
  return new Promise((resolve, reject) =>{
    fetch(`https://raw.githubusercontent.com/exercism/${track}/master/config.json`)
      .then((response) => {
        return response.json().then(resolve).catch(reject);
      })
      .catch(reject);
  });
}

// Local Variables:
// mode: javascript
// End:
